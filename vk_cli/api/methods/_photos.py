from ._vkapi_base import VKApiBase, raw_result, build_request
from ..vk_request import VKRequest


class VKApiPhotos(VKApiBase):
    """
    Photos
    Методы для работы с фотографиями.
    https://vk.com/dev/photos
    """

    method_group = 'photos'

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def confirm_tag(cls, photo_id: object, tag_id: int, owner_id: int = None):
        """
        https://vk.com/dev/photos.confirmTag
        Подтверждает отметку на фотографии.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param tag_id: идентификатор отметки на фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=-1 соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('confirmTag', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def copy(cls, owner_id: int, photo_id: int, access_key: str = None):
        """
        Позволяет скопировать фотографию в альбом "Сохраненные фотографии"
        Возвращает идентификатор созданной фотографии.

        :param owner_id: идентификатор владельца фотографии **Обязательный параметр**
        :param photo_id: индентификатор фотографии **Обязательный параметр**
        :param access_key: специальный код доступа для приватных фотографий
        """
        return cls.build_request('copy', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def create_album(cls, title: str, group_id: int = None, description: str = None, privacy_view: str = None,
                     privacy_comment: str = None, upload_by_admins_only: bool = None, comments_disabled: bool = None):
        """
        Создает пустой альбом для фотографий.
        После успешного выполнения возвращает объект, который содержит следующие поля:   id — идентификатор созданного
        альбома;  thumb_id — идентификатор фотографии, которая является обложкой альбома  (0, если обложка
        отсутствует);  owner_id  идентификатор пользователя или сообщества, которому принадлежит альбом;  title—
        название альбома;  description — описание альбома;  created — дата создания альбома в формате unixtime;
        updated — дата обновления альбома в формате unixtime;  size — количество фотографий в альбоме;
        privacy_view — настройки приватности для альбома в формате настроек приватности (только для альбома
        пользователя);  privacy_comment — настройки приватности для альбома в формате настроек приватности
        (только для альбома пользователя);  upload_by_admins_only — кто может загружать фотографии в альбом
        (только для альбома сообщества);  comments_disabled — отключено ли комментирование альбома (только для
        альбома сообщества);  can_upload — может ли текущий пользователь добавлять фотографии в альбом.

        :param title: название альбома. **Обязательный параметр** Минимальная длина **2**
        :param group_id: идентификатор сообщества, в котором создаётся альбом.
        :param description: текст описания альбома.
        :param privacy_view: настройки приватности просмотра альбома в специальном формате. , по умолчанию **all**,
            доступен начиная с версии **5.30**
        :param privacy_comment: настройки приватности комментирования альбома в специальном формате. , по умолчанию
            **all**, доступен начиная с версии **5.30**
        :param upload_by_admins_only: кто может загружать фотографии в альбом (только для альбома сообщества).
            Возможные значения:
            *0* — фотографии могут добавлять все пользователи;
            *1* — фотографии могут добавлять только редакторы и администраторы. Может принимать значения **1** или **0**
        :param comments_disabled: отключено ли комментирование альбома (только для альбома сообщества).
            Возможные значения:
            *0* — комментирование включено;
            *1* — комментирование отключено. Может принимать значения **1** или **0**
        """
        return cls.build_request('createAlbum', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def create_comment(cls, photo_id: int, owner_id: int = None, message: str = None, attachments: str = None,
                       from_group: bool = None, reply_to_comment: int = None, sticker_id: int = None,
                       access_key: str = None, guid: str = None):
        """
        Создает новый комментарий к фотографии.
        После успешного выполнения возвращает идентификатор созданного комментария.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param message: текст комментария (является обязательным, если не задан параметр **attachments**).
            Максимальное количество символов: 2048.
        :param attachments: список объектов, приложенных к комментарию и разделённых символом ",". Поле **attachments**
            представляется в формате:
            **_,_**
            **** — тип медиа-вложения:
            *photo* — фотография
            *video* — видеозапись
            *audio* — аудиозапись
            *doc* — документ
            **** — идентификатор владельца медиа-вложения
            **** — идентификатор медиа-вложения.
            Например:
            **photo100172_166443618,photo66748_265827614**
            Параметр является обязательным, если не задан параметр **message**.
        :param from_group: Данный параметр учитывается, если **owner_id** *< 0* (комментарий к фотографии группы).
            Возможные значения:
            *1* — комментарий будет опубликован от имени группы;
            *0* — комментарий будет опубликован от имени пользователя.
            По умолчанию: *0*. Может принимать значения **1** или **0**
        :param reply_to_comment: идентификатор комментария, в ответ на который нужно оставить текущий.
        :param sticker_id: идентификатор стикера, который нужно прикрепить к комментарию.
        :param access_key: ключ доступа.
        :param guid: уникальное значение для предотвращения повторной отправки одного и того же комментария.
        """
        return cls.build_request('createComment', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def delete(cls, photo_id: int, owner_id: int = None):
        """
        Удаление фотографии на сайте.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=-1 соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('delete', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def delete_album(cls, album_id: int, group_id: int = None):
        """
        Удаляет указанный альбом для фотографий у текущего пользователя
        После успешного выполнения возвращает 1.

        :param album_id: идентификатор альбома. **Обязательный параметр** Положительное число
        :param group_id: идентификатор сообщества, в котором размещен альбом. Положительное число
        """
        return cls.build_request('deleteAlbum', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def delete_comment(cls, comment_id: int, owner_id: int = None):
        """
        Удаляет комментарий к фотографии.
        После успешного выполнения возвращает 1 (0, если комментарий не найден).

        :param comment_id: идентификатор комментария. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('deleteComment', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def edit(cls, photo_id: int, owner_id: int = None, caption: str = None, latitude: object = None,
             longitude: object = None, place_str: str = None, foursquare_id: str = None, delete_place: bool = None):
        """
        Редактирует описание или геометку у фотографии.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param caption: новый текст описания к фотографии. Если параметр не задан, то считается, что он равен пустой
            строке.
        :param latitude: географическая широта.
        :param longitude: географическая долгота.
        :param place_str: название места.
        :param foursquare_id: id в Foursquare.
        :param delete_place: удалить место (*0* — не удалять, *1* — удалить). Может принимать значения **1** или **0**
        """
        return cls.build_request('edit', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def edit_album(cls, album_id: int, title: str = None, description: str = None, owner_id: int = None,
                   privacy_view: str = None, privacy_comment: str = None, upload_by_admins_only: bool = None,
                   comments_disabled: bool = None):
        """
        Редактирует данные альбома для фотографий.
        После успешного выполнения возвращает 1.

        :param album_id: идентификатор альбома. **Обязательный параметр** Положительное число
        :param title: новое название альбома.
        :param description: новый текст описания альбома.
        :param owner_id: идентификатор владельца альбома (пользователь или сообщество). Обратите внимание, идентификатор
            сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например, **owner_id**=*-1*
            соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор текущего
            пользователя
        :param privacy_view: настройки приватности просмотра альбома в специальном формате. , доступен начиная с версии
            **5.30**
        :param privacy_comment: настройки приватности комментирования альбома в специальном формате. , доступен начиная
            с версии **5.30**
        :param upload_by_admins_only: кто может загружать фотографии в альбом (только для альбома сообщества).
            Возможные значения:
            *0* — фотографии могут добавлять все пользователи;
            *1* — фотографии могут добавлять только редакторы и администраторы. Может принимать значения **1** или **0**
        :param comments_disabled: отключено ли комментирование альбома (только для альбома сообщества).
            Возможные значения:
            *0* — комментирование включено;
            *1* — комментирование отключено. Может принимать значения **1** или **0**
        """
        return cls.build_request('editAlbum', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def edit_comment(cls, comment_id: int, owner_id: int = None, message: str = None, attachments: str = None):
        """
        Изменяет текст комментария к фотографии.
        После успешного выполнения возвращает 1.

        :param comment_id: идентификатор комментария. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param message: новый текст комментария. Обязательный параметр, если не задан параметр **attachments**.
            Максимальное количество символов: 2048.
        :param attachments: новый список объектов, приложенных к комментарию и разделённых символом ",". Поле
            **attachments** представляется в формате:
            **_,_**
            **** — тип медиа-вложения:
            **photo** — фотография
            **video** — видеозапись
            **audio** — аудиозапись
            **doc** — документ
            **** — идентификатор владельца медиа-вложения
            **** — идентификатор медиа-вложения.
            Например:
            **photo100172_166443618,photo66748_265827614**
            Параметр является обязательным, если не задан параметр **message**.
        """
        return cls.build_request('editComment', locals())

    @classmethod
    @build_request('get', with_model='VKPhoto')
    def get(cls, owner_id: int = None, album_id: str = None, photo_ids: str = None, rev: bool = None,
            extended: bool = None, feed_type: str = None, feed: int = None, photo_sizes: bool = None,
            offset: int = None, count: int = None):
        """
        Возвращает список фотографий в альбоме.
        После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов
        фотографий в поле items.  Если к фотографии прикреплено местоположение, также возвращаются поля lat и
        long, содержащие географические координаты отметки.  Если был задан параметр extended=1, возвращаются
        дополнительные поля:   likes — количество отметок Мне нравится и информация о том, поставил ли лайк
        текущий пользователь;  comments — количество комментариев к фотографии;  tags — количество отметок на
        фотографии;  can_comment — может ли текущий пользователь комментировать фото (1 — может, 0 — не может);
        reposts — число репостов фотографии.   Если был задан параметр photo_sizes=1, вместо полей width и
        height возвращаются размеры копий фотографии в специальном формате.

        :param owner_id: идентификатор владельца альбома. Обратите внимание, идентификатор сообщества в параметре
            **owner_id** необходимо указывать со знаком "**-**" — например, **owner_id**=*-1* соответствует
            идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор текущего пользователя
        :param album_id: идентификатор альбома. Для служебных альбомов используются следующие идентификаторы:
            *wall* — фотографии со стены;
            *profile* — фотографии профиля;
            *saved* — сохраненные фотографии. Возвращается только с ключом доступа пользователя.
        :param photo_ids: идентификаторы фотографий, информацию о которых необходимо вернуть.
        :param rev: порядок сортировки фотографий. Возможные значения:
            *1* — антихронологический;
            *0* — хронологический. Может принимать значения **1** или **0**
        :param extended: *1* — будут возвращены дополнительные поля **likes, comments, tags, can_comment, reposts**. По
            умолчанию: *0*. Может принимать значения **1** или **0**
        :param feed_type: тип новости, получаемый в поле type метода newsfeed.get, для получения только загруженных
            пользователем фотографий, либо только фотографий, на которых он был отмечен. Может принимать значения
            *photo, photo_tag*.
        :param feed: время в формате, который может быть получен методом newsfeed.get в поле **date**, для получения
            всех фотографий загруженных пользователем в определённый день либо на которых пользователь был отмечен.
            Также нужно указать параметр **uid** пользователя, с которым произошло событие.
            Значение должно отличаться от текущего времени не более, чем на месяц.
        :param photo_sizes: *1* — возвращать доступные размеры фотографии в специальном формате. По умолчанию: *0*.
            Может принимать значения **1** или **0**
        :param offset: отступ, необходимый для получения определенного подмножества записей.
        :param count: количество записей, которое будет получено. По умолчанию **50**, максимальное значение **1000**
        """

    @classmethod
    @build_request('getAlbums', with_model='VKPhotoAlbum')
    def get_albums(cls, owner_id: int = None, album_ids: object = None, offset: int = None, count: int = None,
                   need_system: bool = None, need_covers: bool = None, photo_sizes: bool = None) -> VKRequest:
        """
        https://vk.com/dev/photos.getAlbums
        Возвращает список фотоальбомов пользователя или сообщества.
        После успешного выполнения возвращает объект, содержащий число результатов в поле **count** и массив объектов,
        описывающих альбомы, в поле **items**.

        :param owner_id: идентификатор пользователя или сообщества, которому принадлежат альбомы. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя

        :param album_ids: перечисленные через запятую идентификаторы альбомов.
        :param offset: смещение, необходимое для выборки определенного подмножества альбомов.
        :param count: количество альбомов, которое нужно вернуть. (по умолчанию возвращаются все альбомы)
        :param need_system: *1* — будут возвращены системные альбомы, имеющие отрицательные идентификаторы.
            Обратите внимание, что информация о системных альбомах возвращается даже в том случае, если они не содержат
                фотографий. Может принимать значения **1** или **0**
        :param need_covers: *1* — будет возвращено дополнительное поле **thumb_src** с адресом изображения-обложки. По
            умолчанию поле **thumb_src** не возвращается. Может принимать значения **1** или **0**
        :param photo_sizes: *1* — размеры фотографий будут возвращены  в специальном формате. Может принимать значения
            **1** или **0**
        """

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_albums_count(cls, user_id: int = None, group_id: int = None):
        """
        Возвращает количество доступных альбомов пользователя или сообщества.
        После успешного выполнения возвращает количество альбомов  с учетом настроек приватности.

        :param user_id: идентификатор пользователя, количество альбомов которого необходимо получить. По умолчанию
            идентификатор текущего пользователя
        :param group_id: идентификатор сообщества, количество альбомов которого необходимо получить.
        """
        return cls.build_request('getAlbumsCount', locals())

    @classmethod
    @build_request('getAll', with_model='VKPhoto')
    def get_all(cls, owner_id: int = None, extended: bool = None, offset: int = None, count: int = None,
                photo_sizes: bool = None, no_service_albums: bool = None, need_hidden: bool = None,
                skip_hidden: bool = None):
        """
        https://vk.com/dev/photos.getAll
        Возвращает все фотографии пользователя или сообщества в антихронологическом порядке.
        После успешного выполнения возвращает список объектов photo.  Если был задан параметр extended=1, возвращаются
        дополнительные поля:   likes — количество отметок Мне нравится и информация о том, поставил ли лайк
        текущий пользователь;  reposts — число репостов фотографии.   Если был задан параметр photo_sizes=1,
        вместо полей width и height возвращаются размеры копий фотографии в специальном формате.  Если был задан
        параметр need_hidden=1, будет возвращено поле hidden = 1 в случае, если фотография скрыта из блока над
        стеной пользователя.  Если был задан параметр skip_hidden=1, для объекта ответа будет возвращено поле
        more, принимающее значения 1 или 0, обозначающее наличие или отсутствие следующих страниц с фотографиями
        пользователя. Также для объекта фотографии будет возвращено поле real_offset, обозначающее настоящую
        позицию фотографии из всех фотографий пользователя. Максимальное полученное значение этого поля
        необходимо передать в offset запроса для следующей страницы.

        :param owner_id: идентификатор пользователя или сообщества, фотографии которого нужно получить. Обратите
            внимание, идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" —
            например, **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию
            идентификатор текущего пользователя
        :param extended: *1* — возвращать расширенную информацию о фотографиях. Может принимать значения **1** или **0**
        :param offset: смещение, необходимое для выборки определенного подмножества фотографий. По умолчанию — *0*.
        :param count: число фотографий, информацию о которых необходимо получить. По умолчанию **20**, максимальное
            значение **200**
        :param photo_sizes: *1* — будут возвращены размеры фотографий в специальном формате. Может принимать значения
            **1** или **0**
        :param no_service_albums: *0* — вернуть все фотографии, включая находящиеся в сервисных альбомах, таких как
            "Фотографии на моей стене" (по умолчанию);
            *1* — вернуть фотографии только из стандартных альбомов пользователя или сообщества. Может принимать
                значения **1** или **0**
        :param need_hidden: *1* — возвращает информацию от том, скрыта ли фотография из блока над стеной пользователя.
            Может принимать значения **1** или **0**
        :param skip_hidden: *1* — не возвращать фотографии, скрытые из блока над стеной пользователя (параметр
            учитывается только при **owner_id** > *0*, параметр **no_service_albums** игнорируется). Может принимать
            значения **1** или **0**
        """
        return cls.build_request('getAll', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_all_comments(cls, owner_id: int = None, album_id: int = None, need_likes: bool = None, offset: int = None,
                         count: int = None):
        """
        Возвращает отсортированный в антихронологическом порядке список всех комментариев к конкретному альбому или ко
        всем альбомам пользователя.
        После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов
        комментариев в поле items с дополнительным полем pid, содержащим идентификатор фотографии, к которой был
        оставлен комментарий.  Если был задан параметр need_likes=1, возвращается дополнительное поле likes:
        count — число пользователей, которым понравился комментарий;  user_likes — наличие отметки «Мне
        нравится» от текущего пользователя  (1 — есть, 0 — нет);  can_like — информация о том, может ли текущий
        пользователь поставить отметку «Мне нравится»  (1 — может, 0 — не может).

        :param owner_id: идентификатор пользователя или сообщества, которому принадлежат фотографии. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=-1 соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param album_id: идентификатор альбома. Если параметр не задан, то считается, что необходимо получить
            комментарии ко всем альбомам пользователя или сообщества.
        :param need_likes: *1* — будет возвращено дополнительное поле **likes**. По умолчанию поле **likes** не
            возвращается. Может принимать значения **1** или **0**
        :param offset: смещение, необходимое для выборки определенного подмножества комментариев. Если параметр не
            задан, то считается, что он равен *0*.
        :param count: количество комментариев, которое необходимо получить. Если параметр не задан, то считается что он
            равен *20*. Максимальное значение параметра *100*.
            Обратите внимание, даже при использовании параметра **offset** для получения доступны только первые 10000
                комментариев.
        """
        return cls.build_request('getAllComments', locals())

    @classmethod
    @build_request('getById', with_model='VKPhoto')
    def get_by_id(cls, photos: str, extended: bool = None, photo_sizes: bool = None):
        """
        Возвращает информацию о фотографиях по их идентификаторам.
        После успешного выполнения возвращает массив объектов photo.  Если к фотографии прикреплено местоположение,
        также возвращаются поля lat и long, содержащие географические координаты отметки.  Если был задан
        параметр extended=1, возвращаются дополнительные поля:   likes — количество отметок Мне нравится и
        информация о том, поставил ли лайк текущий пользователь;  comments — количество комментариев к
        фотографии;  tags — количество отметок на фотографии;  can_comment — может ли текущий пользователь
        комментировать фото (1 — может, 0 — не может);  can_repost — может ли текущий пользователь сделать
        репост фотографии (1 — может, 0 — не может).   Если был задан параметр photo_sizes, вместо полей width и
        height возвращаются размеры копий фотографии в специальном формате.

        :param photos: перечисленные через запятую идентификаторы, которые представляют собой идущие через знак
            подчеркивания id пользователей, разместивших фотографии, и id самих фотографий. Чтобы получить информацию о
            фотографии в альбоме группы, вместо id пользователя следует указать -id группы.
            Пример значения photos: **1_129207899,6492_135055734,
            -20629724_271945303**
            Некоторые фотографии, идентификаторы которых могут быть получены через API, закрыты приватностью, и не будут
                получены. В этом случае следует использовать ключ доступа фотографии (**access_key**) в её
                идентификаторе. Пример значения photos: 1_129207899_**220df2876123d3542f**,
                6492_135055734_**e0a9bcc31144f67fbd**
            Поле **access_key** будет возвращено вместе с остальными данными фотографии в методах, которые возвращают
                фотографии, закрытые приватностью но доступные в данном контексте. Например данное поле имеют
                фотографии, возвращаемые методом newsfeed.get. **Обязательный параметр**
        :param extended: *1* — будут возвращены дополнительные поля **likes, comments, tags, can_comment, can_repost**.
            Поля **comments** и **tags** содержат только количество объектов. По умолчанию данные поля не возвращается.
            Может принимать значения **1** или **0**
        :param photo_sizes: возвращать ли доступные размеры фотографии в специальном формате. Может принимать значения
            **1** или **0**
        """

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_chat_upload_server(cls, chat_id: int, crop_x: int = None, crop_y: int = None, crop_width: int = None):
        """
        Позволяет получить адрес для загрузки обложки чата.
        После успешного выполнения возвращает объект с единственным полем upload_url.

        :param chat_id: идентификатор беседы, для которой нужно загрузить фотографию. **Обязательный параметр**
        :param crop_x: координата **x** для обрезки фотографии (верхний правый угол).
        :param crop_y: координата **y** для обрезки фотографии (верхний правый угол).
        :param crop_width: ширина фотографии после обрезки в px. Минимальное значение **200**
        """
        return cls.build_request('getChatUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_comments(cls, photo_id: int, owner_id: int = None, need_likes: bool = None, start_comment_id: int = None,
                     offset: int = None, count: int = None, sort: str = None, access_key: str = None,
                     extended: bool = None, fields: str = None):
        """
        Возвращает список комментариев к фотографии.
        После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов
        комментариев в поле items.  Если был задан параметр extended=1, возвращает число результатов в поле
        count, отдельно массив объектов комментариев в поле items, пользователей в поле profiles и сообществ в
        поле groups.  Если был задан параметр need_likes=1, у объектов комментариев возвращается дополнительное
        поле likes:   count — число пользователей, которым понравился комментарий;  user_likes — наличие отметки
        «Мне нравится» от текущего пользователя  (1 — есть, 0 — нет);  can_like — информация о том, может ли
        текущий пользователь поставить отметку «Мне нравится»  (1 — может, 0 — не может).   Если был передан
        параметр start_comment_id, будет также возвращено поле real_offset – итоговое смещение данного
        подмножества комментариев (оно может быть отрицательным, если был указан отрицательный offset).

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param need_likes: *1* — будет возвращено дополнительное поле **likes**. По умолчанию: *0*. Может принимать
            значения **1** или **0**
        :param start_comment_id: идентификатор комментария, начиная с которого нужно вернуть список (подробности см.
            ниже). Доступен начиная с версии **5.33**
        :param offset: смещение, необходимое для выборки определенного подмножества комментариев. По умолчанию: *0*.
        :param count: количество комментариев, которое необходимо получить. По умолчанию **20**, максимальное значение
            **100**
        :param sort: порядок сортировки комментариев. Возможные значения:
            *asc* — от старых к новым;
            *desc* — от новых к старым.
        :param access_key: ключ доступа к фотографии.
        :param extended: *1* — в ответе будут возвращены дополнительные поля **profiles** и **groups**, содержащие
            информацию о пользователях и сообществах. По умолчанию: *0*. Может принимать значения **1** или **0**,
            доступен начиная с версии **5.00**
        :param fields: список дополнительных полей профилей, которые необходимо вернуть. См. подробное описание.
            Доступные значения: *photo_id, verified, sex, bdate, city, country, home_town, has_photo, photo_50,
                photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, lists, domain,
                has_mobile, contacts, site, education, universities, schools, status, last_seen, followers_count,
                common_count, occupation, nickname, relatives, relation, personal, connections, exports, wall_comments,
                activities, interests, music, movies, tv, books, games, about, quotes, can_post, can_see_all_posts,
                can_see_audio, can_write_private_message, can_send_friend_request, is_favorite, is_hidden_from_feed,
                timezone, screen_name, maiden_name, crop_photo, is_friend, friend_status, career, military, blacklisted,
                blacklisted_by_me*.
        """
        return cls.build_request('getComments', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_market_album_upload_server(cls, group_id: int):
        """
        Возвращает адрес сервера для загрузки фотографии подборки товаров в сообществе.
        После успешного выполнения возвращает объект с единственным полем upload_url.

        :param group_id: идентификатор сообщества, для которого необходимо загрузить фотографию подборки товаров.
            **Обязательный параметр**
        """
        return cls.build_request('getMarketAlbumUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_market_upload_server(cls, group_id: int, main_photo: bool = None, crop_x: int = None, crop_y: int = None,
                                 crop_width: int = None):
        """
        Возвращает адрес сервера для загрузки фотографии товара.
        После успешного выполнения возвращает объект с единственным полем upload_url.

        :param group_id: идентификатор сообщества, для которого необходимо загрузить фотографию товара. **Обязательный
            параметр**
        :param main_photo: является ли фотография обложкой товара  (1 — фотография для обложки, 0 — дополнительная
            фотография) Может принимать значения **1** или **0**
        :param crop_x: координата **x** для обрезки фотографии (верхний правый угол).
        :param crop_y: координата **y** для обрезки фотографии (верхний правый угол).
        :param crop_width: ширина фотографии после обрезки в px. Минимальное значение **400**
        """
        return cls.build_request('getMarketUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_messages_upload_server(cls, peer_id: int):
        """
        Возвращает адрес сервера для загрузки фотографии в личное сообщение.
        После успешного выполнения возвращает объект с полями upload_url, album_id (id альбома),  group_id
        (идентификатор сообщества, если используются сообщения сообщества).

        :param peer_id: идентификатор назначения (для загрузки фотографии в сообщениях сообществ).
        """
        return cls.build_request('getMessagesUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_new_tags(cls, offset: int = None, count: int = None):
        """
        Возвращает список фотографий, на которых есть непросмотренные отметки.
        После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов
        фотографий в поле items.  Объекты фотографий содержат дополнительные поля:   placer_id — идентификатор
        пользователя, сделавшего отметку;  tag_created — дата создания отметки в формате unixtime;  tag_id —
        идентификатор отметки.

        :param offset: смещение, необходимое для получения определённого подмножества фотографий.
        :param count: количество фотографий, которые необходимо вернуть. Максимальное значение **100**, по умолчанию
            **20**
        """
        return cls.build_request('getNewTags', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_owner_cover_photo_upload_server(cls, group_id: int, crop_x: int = None, crop_y: int = None,
                                            crop_x2: int = None, crop_y2: int = None):
        """
        Получает адрес для загрузки обложки сообщества.
        Возвращает объект с единственным полем upload_url, содержащим адрес сервера для загрузки фото.

        :param group_id: идентификатор сообщества. **Обязательный параметр**
        :param crop_x: координата X верхнего левого угла для обрезки изображения. По умолчанию **0**
        :param crop_y: координата Y верхнего левого угла для обрезки изображения. По умолчанию **0**
        :param crop_x2: координата X нижнего правого угла для обрезки изображения. По умолчанию **795**
        :param crop_y2: координата Y нижнего правого угла для обрезки изображения. По умолчанию **200**
        """
        return cls.build_request('getOwnerCoverPhotoUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_owner_photo_upload_server(cls, owner_id: int):
        """
        Возвращает адрес сервера для загрузки главной фотографии на страницу пользователя или сообщества.
        После успешного выполнения возвращает объект с единственным полем upload_url.

        :param owner_id: идентификатор сообщества или текущего пользователя. Обратите внимание, идентификатор сообщества
            в параметре **owner_id** необходимо указывать со знаком "**-**" — например, **owner_id**=*-1* соответствует
            идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор текущего пользователя
        """
        return cls.build_request('getOwnerPhotoUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_tags(cls, photo_id: int, owner_id: int = None, access_key: str = None):
        """
        Возвращает список отметок на фотографии.
        После успешного выполнения возвращает массив объектов tag, каждый из которых содержит следующие поля:   user_id
        — идентификатор пользователя, которому соответствует отметка;  id — идентификатор отметки;  placer_id —
        идентификатор пользователя, сделавшего отметку;  tagged_name — название отметки;  date — дата добавления
        отметки в формате unixtime;  x, y, x2, y2 — координаты прямоугольной области, на которой сделана отметка
        (верхний левый угол и нижний правый угол) в процентах;  viewed — статус отметки (1 — подтвержденная, 0 —
        неподтвержденная).

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param access_key: строковой ключ доступа, который может быть получен при получении объекта фотографии.
        """
        return cls.build_request('getTags', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_upload_server(cls, album_id: int = None, group_id: int = None):
        """
        Возвращает адрес сервера для загрузки фотографий.
        После успешного выполнения возвращает объект, содержащий следующие поля:   upload_url — адрес для загрузки
        фотографий;  album_id — идентификатор альбома, в который будет загружена фотография;  user_id —
        идентификатор пользователя, от чьего имени будет загружено фото.

        :param album_id: идентификатор альбома.
        :param group_id: идентификатор сообщества, которому принадлежит альбом (если необходимо загрузить фотографию в
            альбом сообщества).
            Если **group_id** не указан, возвращается адрес для загрузки на стену текущего пользователя.
        """
        return cls.build_request('getUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_user_photos(cls, user_id: int = None, offset: int = None, count: int = None, extended: bool = None,
                        sort: str = None):
        """
        Возвращает список фотографий, на которых отмечен пользователь
        После успешного выполнения возвращает список объектов photo.  Если был задан параметр extended=1, возвращаются
        дополнительные поля:   likes — количество отметок Мне нравится и информация о том, поставил ли лайк
        текущий пользователь;  comments — количество комментариев к фотографии;  tags — количество отметок на
        фотографии;  can_comment — может ли текущий пользователь комментировать фото (1 — может, 0 — не может).
        Если был задан параметр photo_sizes=1, вместо полей width и height возвращаются размеры копий фотографии
        в специальном формате.

        :param user_id: идентификатор пользователя, список фотографий для которого нужно получить. По умолчанию
            идентификатор текущего пользователя
        :param offset: смещение, необходимое для выборки определенного подмножества фотографий. По умолчанию — *0*.
        :param count: количество фотографий, которое необходимо получить. По умолчанию **20**, максимальное значение
            **1000**
        :param extended: *1* — будут возвращены дополнительные поля **likes, comments, tags, can_comment**. Поля
            **comments** и **tags** содержат только количество объектов. По умолчанию данные поля не возвращается. Может
            принимать значения **1** или **0**
        :param sort: сортировка результатов (*0* — по дате добавления отметки в порядке убывания, *1* — по дате
            добавления отметки в порядке возрастания).
        """
        return cls.build_request('getUserPhotos', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def get_wall_upload_server(cls, group_id: int):
        """
        Возвращает адрес сервера для загрузки фотографии на стену пользователя или сообщества.
        После успешного выполнения возвращает объект с полями upload_url, album_id, user_id.

        :param group_id: идентификатор сообщества, на стену которого нужно загрузить фото (без знака «минус»).
        """
        return cls.build_request('getWallUploadServer', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def make_cover(cls, photo_id: int, owner_id: int = None, album_id: int = None):
        """
        Делает фотографию обложкой альбома.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. Фотография должна находиться в альбоме **album_id**. **Обязательный
            параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param album_id: идентификатор альбома.
        """
        return cls.build_request('makeCover', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def move(cls, target_album_id: int, photo_id: int, owner_id: int = None):
        """
        Переносит фотографию из одного альбома в другой.
        После успешного выполнения возвращает 1.

        :param target_album_id: идентификатор альбома, в который нужно переместить фотографию. **Обязательный параметр**
        :param photo_id: идентификатор фотографии, которую нужно перенести. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('move', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def put_tag(cls, photo_id: int, user_id: int, owner_id: int = None, x: object = None, y: object = None,
                x2: object = None, y2: object = None):
        """
        Добавляет отметку на фотографию.
        После успешного выполнения возвращает идентификатор созданной отметки (tag id).

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param user_id: идентификатор пользователя, которого нужно отметить на фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя, которому принадлежит фотография. По умолчанию идентификатор
            текущего пользователя
        :param x: координата верхнего левого угла области с отметкой в % от ширины фотографии.
        :param y: координата верхнего левого угла области с отметкой в % от высоты фотографии.
        :param x2: координата правого нижнего угла области с отметкой в % от ширины фотографии.
        :param y2: координата правого нижнего угла области с отметкой в % от высоты фотографии.
        """
        return cls.build_request('putTag', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def remove_tag(cls, photo_id: int, tag_id: int, owner_id: int = None):
        """
        Удаляет отметку с фотографии.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param tag_id: идентификатор отметки. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=**-1** соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('removeTag', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def reorder_albums(cls, album_id: int, owner_id: int = None, before: int = None, after: int = None):
        """
        Меняет порядок альбома в списке альбомов пользователя.
        После успешного выполнения возвращает 1.

        :param album_id: идентификатор альбома. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит альбом. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param before: идентификатор альбома, перед которым следует поместить альбом.
        :param after: идентификатор альбома, после которого следует поместить альбом.
        """
        return cls.build_request('reorderAlbums', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def reorder_photos(cls, photo_id: int, owner_id: int = None, before: int = None, after: int = None):
        """
        Меняет порядок фотографии в списке фотографий альбома пользователя.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        :param before: идентификатор фотографии, перед которой следует поместить фотографию. Если параметр не указан,
            фотография будет помещена последней.
        :param after: идентификатор фотографии, после которой следует поместить фотографию. Если параметр не указан,
            фотография будет помещена первой.
        """
        return cls.build_request('reorderPhotos', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def report(cls, owner_id: int, photo_id: int, reason: int = None):
        """
        Позволяет пожаловаться на фотографию.
        После успешного выполнения возвращает 1.

        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. **Обязательный
            параметр**
        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param reason: причина жалобы:
            *0* — спам;
            *1* — детская порнография;
            *2* — экстремизм;
            *3* — насилие;
            *4* — пропаганда наркотиков;
            *5* — материал для взрослых;
            *6* — оскорбление.
        """
        return cls.build_request('report', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def report_comment(cls, owner_id: int, comment_id: int, reason: int = None):
        """
        Позволяет пожаловаться на комментарий к фотографии.
        После успешного выполнения возвращает 1.

        :param owner_id: идентификатор владельца фотографии к которой оставлен комментарий. **Обязательный параметр**
        :param comment_id: идентификатор комментария. **Обязательный параметр**
        :param reason: причина жалобы:
            *0* — спам;
            *1* — детская порнография;
            *2* — экстремизм;
            *3* — насилие;
            *4* — пропаганда наркотиков;
            *5* — материал для взрослых;
            *6* — оскорбление.
        """
        return cls.build_request('reportComment', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def restore(cls, photo_id: int, owner_id: int = None):
        """
        Восстанавливает удаленную фотографию.
        После успешного выполнения возвращает 1.

        :param photo_id: идентификатор фотографии. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=-1 соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('restore', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def restore_comment(cls, comment_id: int, owner_id: int = None):
        """
        Восстанавливает удаленный комментарий к фотографии.
        После успешного выполнения возвращает 1 (0, если комментарий с таким идентификатором не является удаленным).

        :param comment_id: идентификатор удаленного комментария. **Обязательный параметр**
        :param owner_id: идентификатор пользователя или сообщества, которому принадлежит фотография. Обратите внимание,
            идентификатор сообщества в параметре **owner_id** необходимо указывать со знаком "**-**" — например,
            **owner_id**=*-1* соответствует идентификатору сообщества ВКонтакте API (club1) По умолчанию идентификатор
            текущего пользователя
        """
        return cls.build_request('restoreComment', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save(cls, album_id: int = None, group_id: int = None, server: int = None, photos_list: str = None,
             hash_: str = None, latitude: object = None, longitude: object = None, caption: str = None):
        """
        Сохраняет фотографии после успешной загрузки.
        После успешного выполнения возвращает массив объектов фотографий.

        :param album_id: идентификатор альбома, в который необходимо сохранить фотографии.
        :param group_id: идентификатор сообщества, в которое необходимо сохранить фотографии.
        :param server: параметр, возвращаемый в результате загрузки фотографий на сервер.
        :param photos_list: параметр, возвращаемый в результате загрузки фотографий на сервер.
        :param hash_: параметр, возвращаемый в результате загрузки фотографий на сервер.
        :param latitude: географическая широта, заданная в градусах (от *-90* до *90*);
        :param longitude: географическая долгота, заданная в градусах (от *-180* до *180*);
        :param caption: текст описания фотографии (максимум **2048** символов).
        """
        return cls.build_request('save', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save_market_album_photo(cls, group_id: int, photo: str, server: int, hash_: str):
        """
        Сохраняет фотографии после успешной загрузки на URI, полученный методом photos.getMarketAlbumUploadServer.
        После успешного выполнения возвращает массив, содержащий объект с загруженной фотографией.

        :param group_id: идентификатор группы, для которой нужно загрузить фотографию. **Обязательный параметр**
        :param photo: параметр, возвращаемый в результате загрузки фотографии на сервер.
            Минимальный размер фотографии — 1280x720 пикселей. **Обязательный параметр**
        :param server: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        :param hash_: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        """
        return cls.build_request('saveMarketAlbumPhoto', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save_market_photo(cls, photo: str, server: int, hash_: str, group_id: int = None, crop_data: str = None,
                          crop_hash: str = None):
        """
        Сохраняет фотографии после успешной загрузки на URI, полученный методом photos.getMarketUploadServer.
        После успешного выполнения возвращает массив, содержащий объект с загруженной фотографией.

        :param photo: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        :param server: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        :param hash_: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        :param group_id: идентификатор группы, для которой нужно загрузить фотографию.
        :param crop_data: параметр, возвращаемый в результате загрузки фотографии на сервер.
        :param crop_hash: параметр, возвращаемый в результате загрузки фотографии на сервер.
        """
        return cls.build_request('saveMarketPhoto', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save_messages_photo(cls, photo: str, server: int = None, hash_: str = None):
        """
        Сохраняет фотографию после успешной загрузки на URI, полученный методом photos.getMessagesUploadServer.
        После успешного выполнения возвращает массив с загруженной фотографией, возвращённый объект имеет поля id, pid,
        aid, owner_id, src, src_big, src_small, created. В случае наличия фотографий в высоком разрешении также
        будут возвращены адреса с названиями src_xbig и src_xxbig.

        :param photo: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        :param server: параметр, возвращаемый в результате загрузки фотографии на сервер.
        :param hash_: параметр, возвращаемый в результате загрузки фотографии на сервер.
        """
        return cls.build_request('saveMessagesPhoto', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save_owner_cover_photo(cls, hash_: str, photo: str):
        """
        Сохраняет изображение для обложки сообщества после успешной загрузки.
        Возвращает массив images объектов, описывающих копии загруженной фотографии. Каждый объект содержит следующие
        поля:   url (string) — URL копии фотографии;  width (integer) — ширина копии в px;  height (integer) —
        высота копии в px.

        :param hash_: параметр **hash**, полученный в результате загрузки фотографии на сервер. **Обязательный
            параметр**
        :param photo: параметр **photo**, полученный в результате загрузки фотографии на сервер. **Обязательный
            параметр**
        """
        return cls.build_request('saveOwnerCoverPhoto', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save_owner_photo(cls, server: str = None, hash_: str = None, photo: str = None):
        """
        Позволяет сохранить главную фотографию пользователя или сообщества.
        После успешного выполнения возвращает объект, содержащий поля photo_hash и photo_src (при работе через VK.api
        метод вернёт поля photo_src, photo_src_big, photo_src_small). Параметр photo_hash необходим для
        подтверждения пользователем изменения его фотографии через вызов метода saveProfilePhoto Javascript API.
        Поле photo_src содержит путь к загруженной фотографии.

        :param server: параметр, возвращаемый в результате загрузки фотографии на сервер.
        :param hash_: параметр, возвращаемый в результате загрузки фотографии на сервер.
        :param photo: параметр, возвращаемый в результате загрузки фотографии на сервер.
        """
        return cls.build_request('saveOwnerPhoto', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def save_wall_photo(cls, photo: str, user_id: int = None, group_id: int = None, server: int = None,
                        hash_: str = None, latitude: object = None, longitude: object = None, caption: str = None):
        """
        Сохраняет фотографии после успешной загрузки на URI, полученный методом photos.getWallUploadServer.
        После успешного выполнения возвращает массив, содержащий объект с загруженной фотографией.

        :param photo: параметр, возвращаемый в результате загрузки фотографии на сервер. **Обязательный параметр**
        :param user_id: идентификатор пользователя, на стену которого нужно сохранить фотографию.
        :param group_id: идентификатор сообщества, на стену которого нужно сохранить фотографию.
        :param server: параметр, возвращаемый в результате загрузки фотографии на сервер.
        :param hash_: параметр, возвращаемый в результате загрузки фотографии на сервер.
        :param latitude: географическая широта, заданная в градусах (от *-90* до *90*);
        :param longitude: географическая долгота, заданная в градусах (от *-180* до *180*);
        :param caption: текст описания фотографии (максимум **2048** символов).
        """
        return cls.build_request('saveWallPhoto', locals())

    @classmethod
    @raw_result
    # @with_model('vk_cli.models.VKModel')
    def search(cls, q: str = None, lat: object = None, long: object = None, start_time: int = None,
               end_time: int = None, sort: int = None, offset: int = None, count: int = None, radius: int = None):
        """
        Осуществляет поиск изображений по местоположению или описанию.
        После успешного выполнения возвращает объект, содержащий число результатов в поле count и массив объектов
        фотографий в поле items.

        :param q: строка поискового запроса, например, *Nature*.
        :param lat: географическая широта отметки, заданная в градусах (от *-90* до *90*).
        :param long: географическая долгота отметки, заданная в градусах (от *-180* до *180*).
        :param start_time: время в формате unixtime, не раньше которого должны были быть загружены найденные фотографии.
        :param end_time: время в формате unixtime, не позже которого должны были быть загружены найденные фотографии.
        :param sort: сортировка результатов. Возможные значения:
            *1* — по количеству отметок **«Мне нравится»**;
            *0* — по дате добавления фотографии.
        :param offset: смещение относительно первой найденной фотографии для выборки определенного подмножества.
        :param count: количество возвращаемых фотографий. По умолчанию **100**, максимальное значение **1000**
        :param radius: радиус поиска в метрах. (работает очень приближенно, поэтому реальное расстояние до цели может
            отличаться от заданного). Может принимать значения: *10*, *100*, *800*, *6000*, *50000* По умолчанию
            **5000**
        """
        return cls.build_request('search', locals())
